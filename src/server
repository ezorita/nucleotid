#!/usr/bin/env node

const log   = require('./modules/logger').logmodule(module);

var server;

log.info(`Node server (NODE_ENV = ${process.env.NODE_ENV})`);

run_checks();

async function run_checks() {
  
  log.info('checking server dependencies before startup...');
  
  // Check database connection.
  const psql = require('./modules/db');
  try {
    var obj = await psql.db.connect();
  } catch (err) {
    log.error(`db connection failed: ${err}`);
    process.exit(1);
  }
  log.info(`db connection successful`);
  obj.done();

  // Create DB tables if not in production.
  if (process.env.NODE_ENV !== 'production') {
    try {
      await psql.createDBTables();
    } catch (err) {
      log.error(`error creating DB tables: ${err}`);
      process.exit(1);
    }
    log.info('db tables created successfully');
  }

  // When all checks are passed, start the server.
  start_server();
}

function start_server () {
  /*
  ** Module dependencies.
  */

  var https_app = require('./https_app');
  var https = require('https');
  var fs = require('fs');
  var config = require('../config').server[process.env.NODE_ENV || 'dev'];

  /*
  ** Create HTTPS server.
  */
  log.info(`starting https server...`);
  var https_port = normalizePort(config.https_port || '443');
  https_app.set('port', https_port);

  const ssl_options = {
    key: fs.readFileSync('crt/nucleotid-dev.key'),
    cert: fs.readFileSync('crt/nucleotid-dev.crt')
  };

  server = https.createServer(ssl_options,https_app);

  /*
  ** Listen on provided port, on all network interfaces.
  */

  server.listen(https_port);
  server.on('error', onError);
  server.on('listening', onListening);
}

/*
** Normalize a port into a number, string, or false.
**/

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof https_port === 'string'
    ? 'Pipe ' + https_port
    : 'Port ' + https_port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      log.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      log.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  log.info(`server listening on ${bind}`);
}
